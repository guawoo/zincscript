<?xml version="1.0" encoding="UTF-8"?>

<unit>
	<body id="diary1">
		<richtextviewer id="content">
			ZincFish是一个移动Ajax和WEB Widgets技术框架，可以为运行在移动设备上的应用提供更佳的用户体验:-)
			架构上，ZincFish包含两部分，分别是Ajax引擎和UI组件库。Ajax引擎主要由xml解析器，ZincScript脚本引擎(独立实现的语法类似Ruby的脚本，功能层上相当于JavaScript，因此ZincFish实现的移动Ajax更准确的名称应当是"Azax
			-- Asynchronous ZincScript and XML")以及相关的函数库组成。
			UI组件库则在Akebono组件的基础上，加上了可以由xml标签定义并触发ZincScript方法的通用接口，重新封装成组件库。
			<img src="http://" alt="图" />
			采用ZincFish框架的最大好处是可以将UI和UI事件响应从代码中抽出来，将其放到xml和ZincScript脚本中，从而将逻辑和底层分离。客户端只需要实现一个健壮的引擎，而程序运行时所需的数据全都在程序执行过程中通过其他途径(网络、本地文件等)获取。
			如果客户端引擎能够做得足够的通用，将来对产品的维护和升级工作就会主要集中在对xml和ZincScript脚本的维护上，客户端不用做任何升级和再发布。开发者可以按照规则任意修改xml和脚本，修改的结果可以马上在客户端看到，客户端可以"无痛"响应界面和逻辑的任何变化。

			这种开发方式带来的另一大好处更大意义上的跨平台。由于所有界面和逻辑都封装在外部数据中，因此无论何种平台，J2ME也好、Symbian也好，只要实现了ZincFish引擎，都可以解析并执行这些外部数据和逻辑。这种共同共享的数据是跨平台的核心。
			Java的跨平台实际上狭义的代码级别跨平台，真正的跨平台应当想网页一样，是数据级别的跨平台。在这一点上ZincFish将不懈努力。

			如果库函数API条例清晰，xml结构严谨，并且有足够详细的文档和培训，那么ZincFish可能会带来开发方式的重大变革。这种变革的最直接好处就是大大降低开发成本。
			<img src="http://" alt="图" />
		</richtextviewer>
		<list id="diarylist" title="评论区">
			<item id="diary1" src="http://" title="老大，你是我偶像呀" content="老大，你真是我的O像!!"
				ltail1="2" ltail2="0" rtail="03-03" icon="8" />
			<item id="diary2" src="http://" title="这是个什么东东？" content="这个框架是个什么东东呀？"
				ltail1="3" ltail2="0" rtail="02-28" icon="8" />
			<item id="diary3" src="http://" title="Opera也有类似的框架" content="好像Opera也有类似的框架."
				ltail1="5" ltail2="0" rtail="02-26" icon="0" />
		</list>
	</body>
</unit>